name: Secret Hygiene Scan

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  repository_dispatch:
    types: [trigger-secret-scan]

jobs:
  scan-for-secrets:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install fpdf PyPDF2 requests

      - name: Get changed files
        id: changed
        uses: tj-actions/changed-files@v41

      - name: List changed files
        run: |
          echo "Changed files:"
          echo "${{ steps.changed.outputs.all_changed_files }}"

      - name: Run Secret Hygiene Scanner on changed files only
        run: |
          echo "${{ steps.changed.outputs.all_changed_files }}" > changed_files.txt
          python secret_hygiene_scanner.py --path . --output scan_results.json --fail-on 0

      - name: Upload scan results JSON
        if: always()
        uses: actions/upload-artifact@v3.1.3
        with:
          name: secret-scan-report
          path: scan_results.json

      - name: Upload PDF report (optional)
        if: always()
        run: |
          python secret_hygiene_scanner.py --path . --output scan_results.json --export-pdf --pdf-password changeme123

      - name: Upload PDF artifact
        if: always()
        uses: actions/upload-artifact@v3.1.3
        with:
          name: secret-scan-pdf
          path: secret_scan_report.pdf

      - name: Tag PR with security label if secrets found
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('scan_results.json', 'utf8'));
            if (data.total_findings > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['security']
              });
            }

      - name: Comment on PR with scan summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('scan_results.json', 'utf8'));
            const findings = data.total_findings;
            const message = findings > 0
              ? `\u26a0\ufe0f ${findings} potential secret(s) detected in this PR.`
              : `\u2705 No secrets detected in this PR.`;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

      - name: Send Slack notification (on failure)
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: "Secret Hygiene Scan failed. Secrets may have been detected."
          SLACK_COLOR: '#ff0000'

      - name: Send Email notification (on failure)
        if: failure()
        run: |
          echo "Secret scan failed." | mail -s "Secret Hygiene Scan Alert" security@yourdomain.com
